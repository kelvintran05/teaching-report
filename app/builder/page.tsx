"use client";

import { useState, useEffect } from "react";
import {
  Form,
  DatePicker,
  Select,
  Input,
  Button,
  Table,
  Space,
  message,
  Modal,
  Card,
  Typography,
  Row,
  Col,
  Tooltip,
} from "antd";
import {
  PlusOutlined,
  DeleteOutlined,
  EditOutlined,
  FileExcelOutlined,
  PrinterOutlined,
  CopyOutlined,
  EyeOutlined,
} from "@ant-design/icons";
import dayjs, { Dayjs } from "dayjs";
import * as XLSX from "xlsx";
import ExcelJS from "exceljs";
import dynamic from "next/dynamic";

const { TextArea } = Input;
const { Title, Text } = Typography;

type Item = {
  id: string;
  date: string;
  schoolName: string;
  session: string;
  period: string;
  className: string[]; // Multi-select array
  lessonName: string;
  ta: string;
  classStatus: string;
  selfEvaluation: string;
  taComment: string;
};

const SCHOOLS = ["TH ƒêinh B·ªô Lƒ©nh", "TH Hu·ª≥nh VƒÉn Ch√≠nh", "TH ƒêo√†n Th·ªã ƒêi·ªÉm"];

// Kh·ªëi theo tr∆∞·ªùng
const GRADES_BY_SCHOOL: Record<string, string[]> = {
  "TH ƒêinh B·ªô Lƒ©nh": ["Kh·ªëi 2", "Kh·ªëi 3", "Kh·ªëi 4"],
  "TH Hu·ª≥nh VƒÉn Ch√≠nh": ["Kh·ªëi 1", "Kh·ªëi 2"],
  "TH ƒêo√†n Th·ªã ƒêi·ªÉm": ["Kh·ªëi 1"],
};

// L·ªõp theo tr∆∞·ªùng v√† kh·ªëi
const CLASSES_BY_SCHOOL_AND_GRADE: Record<string, Record<string, string[]>> = {
  "TH ƒêinh B·ªô Lƒ©nh": {
    "Kh·ªëi 2": ["2/1", "2/2"],
    "Kh·ªëi 3": ["3/1", "3/9"],
    "Kh·ªëi 4": ["4/2"],
  },
  "TH Hu·ª≥nh VƒÉn Ch√≠nh": {
    "Kh·ªëi 1": ["1/11", "1/12", "1/13", "1/14"],
    "Kh·ªëi 2": ["2/4", "2/7"],
  },
  "TH ƒêo√†n Th·ªã ƒêi·ªÉm": {
    "Kh·ªëi 1": ["1/17", "1/18"],
  },
};

const SESSIONS = ["S√°ng", "Chi·ªÅu"];
const TAS = ["Ng·ªçc An", "Y·∫øn Nhi", "Uy√™n", "Minh Truy·ªÅn", "Kh√¥ng c√≥ tr·ª£ gi·∫£ng"];
const TA_COMMENT_SUGGEST =
  "Tr·ª£ gi·∫£ng bi·∫øt vi·ªác, bao qu√°t l·ªõp tuy nhi√™n v·∫´n ch∆∞a th·ª±c s·ª± x·ª≠ l√≠ t·ªët c√°c t√¨nh hu·ªëng, trang ph·ª•c ch∆∞a ph√π h·ª£p";
const CLASS_STATUS_SUGGEST =
  "T√¨nh h√¨nh c∆° s·ªü v·∫≠t ch·∫•t: Ti vi s·ª≠ d·ª•ng b√¨nh th∆∞·ªùng";

export default function BuilderPage() {
  const teacher = "Hu·ª≥nh Th·ªã Ho√†ng Anh";
  const [form] = Form.useForm();
  const [items, setItems] = useState<Item[]>([]);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [previewVisible, setPreviewVisible] = useState(false);
  const [html, setHtml] = useState<string | null>(null);
  const [selectedSchool, setSelectedSchool] = useState<string>("");
  const [selectedGrade, setSelectedGrade] = useState<string>("");
  const [availableGrades, setAvailableGrades] = useState<string[]>([]);
  const [availableClasses, setAvailableClasses] = useState<string[]>([]);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  const handleSubmit = (values: any) => {
    const newItem: Item = {
      id: editingId || crypto.randomUUID(),
      date: values.date.format("YYYY-MM-DD"),
      schoolName: values.schoolName,
      session: values.session,
      period: values.period || "",
      className: values.className,
      lessonName: values.lessonName,
      ta: values.ta || "",
      classStatus: values.classStatus || "",
      selfEvaluation: values.selfEvaluation || "",
      taComment: values.taComment || "",
    };

    if (editingId) {
      setItems(items.map((it) => (it.id === editingId ? newItem : it)));
      message.success({
        content: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t ho·∫°t ƒë·ªông th√†nh c√¥ng!",
        duration: 3,
      });
    } else {
      setItems([...items, newItem]);
      message.success({
        content: "üéâ ƒê√£ th√™m ho·∫°t ƒë·ªông m·ªõi v√†o danh s√°ch!",
        duration: 3,
      });
    }

    form.resetFields();
    setEditingId(null);
    setSelectedSchool("");
    setSelectedGrade("");
    setAvailableGrades([]);
    setAvailableClasses([]);
  };

  const handleEdit = (item: Item) => {
    setEditingId(item.id);
    setSelectedSchool(item.schoolName);

    // Load grades cho tr∆∞·ªùng
    const grades = GRADES_BY_SCHOOL[item.schoolName] || [];
    setAvailableGrades(grades);

    // T√¨m grade t·ª´ className (l·∫•y s·ªë ƒë·∫ßu ti√™n t·ª´ className ƒë·∫ßu ti√™n)
    const firstClass = item.className[0];
    const gradeNumber = firstClass ? firstClass.split("/")[0] : "";
    const gradeName = gradeNumber ? `Kh·ªëi ${gradeNumber}` : "";

    setSelectedGrade(gradeName);

    // Load classes cho grade
    if (gradeName) {
      setAvailableClasses(
        CLASSES_BY_SCHOOL_AND_GRADE[item.schoolName]?.[gradeName] || []
      );
    }

    form.setFieldsValue({
      date: dayjs(item.date),
      schoolName: item.schoolName,
      gradeName: gradeName,
      session: item.session,
      period: item.period,
      className: item.className,
      lessonName: item.lessonName,
      ta: item.ta,
      classStatus: item.classStatus,
      selfEvaluation: item.selfEvaluation,
      taComment: item.taComment,
    });
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const handleSchoolChange = (schoolName: string) => {
    setSelectedSchool(schoolName);
    setAvailableGrades(GRADES_BY_SCHOOL[schoolName] || []);
    setSelectedGrade("");
    setAvailableClasses([]);
    // Reset grade v√† className khi ƒë·ªïi tr∆∞·ªùng
    form.setFieldValue("gradeName", undefined);
    form.setFieldValue("className", undefined);
  };

  const handleGradeChange = (gradeName: string) => {
    setSelectedGrade(gradeName);
    if (selectedSchool && gradeName) {
      setAvailableClasses(
        CLASSES_BY_SCHOOL_AND_GRADE[selectedSchool]?.[gradeName] || []
      );
    } else {
      setAvailableClasses([]);
    }
    // Reset className khi ƒë·ªïi kh·ªëi
    form.setFieldValue("className", undefined);
  };

  const handleDelete = (id: string) => {
    Modal.confirm({
      title: "X√°c nh·∫≠n x√≥a",
      content: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ho·∫°t ƒë·ªông n√†y?",
      okText: "X√≥a",
      cancelText: "H·ªßy",
      okType: "danger",
      onOk: () => {
        setItems(items.filter((it) => it.id !== id));
        message.success({
          content: "üóëÔ∏è ƒê√£ x√≥a ho·∫°t ƒë·ªông kh·ªèi danh s√°ch",
          duration: 2,
        });
      },
    });
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    message.success({
      content: "üìã ƒê√£ sao ch√©p v√†o clipboard!",
      duration: 2,
    });
  };

  const exportToExcel = async () => {
    try {
      const dates = items.map((it) => it.date).filter((d) => d);
      const startDate = dates.length > 0 ? dates.sort()[0] : "";
      const endDate = dates.length > 0 ? dates.sort()[dates.length - 1] : "";

      // ƒê·ªçc file template v·ªõi ExcelJS
      const response = await fetch("/template_report.xlsx");
      const arrayBuffer = await response.arrayBuffer();

      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.load(arrayBuffer);

      // L·∫•y worksheet ƒë·∫ßu ti√™n
      const worksheet = workbook.worksheets[0];

      // L·∫•y style m·∫´u t·ª´ d√≤ng 2 (header row) ƒë·ªÉ copy sang data rows
      const headerRow = worksheet.getRow(2);

      // Fill d·ªØ li·ªáu v√†o template (b·∫Øt ƒë·∫ßu t·ª´ d√≤ng 3)
      items.forEach((item, idx) => {
        const rowNum = idx + 3;
        const row = worksheet.getRow(rowNum);

        // Helper function ƒë·ªÉ copy style t·ª´ header v√† set value
        const setCellWithStyle = (
          colNum: number,
          value: any,
          align: "center" | "left" = "center"
        ) => {
          const cell = row.getCell(colNum);
          const headerCell = headerRow.getCell(colNum);

          // Cells v·ªõi text nhi·ªÅu d√≤ng n√™n d√πng vertical "top"
          // Columns: G(7)-T√™n b√†i, H(8)-T·ª± ƒë√°nh gi√°, I(9)-T√¨nh h√¨nh ti·∫øt h·ªçc, J(10)-Nh·∫≠n x√©t TA
          const isMultiLineCell = [7, 8, 9, 10].includes(colNum);

          // Copy style t·ª´ header nh∆∞ng b·ªè bold v√† ƒë·∫£m b·∫£o border
          cell.style = {
            ...headerCell.style,
            font: {
              ...headerCell.style.font,
              bold: false, // Data kh√¥ng bold
            },
            border: {
              top: { style: "thin", color: { argb: "FF000000" } },
              left: { style: "thin", color: { argb: "FF000000" } },
              bottom: { style: "thin", color: { argb: "FF000000" } },
              right: { style: "thin", color: { argb: "FF000000" } },
            },
            alignment: {
              horizontal: align,
              vertical: isMultiLineCell ? "top" : "middle",
              wrapText: true, // Cho ph√©p text wrap v√† gi·ªØ line breaks (\n)
            },
          };
          cell.value = value;
        };

        // A: Ng√†y - canh gi·ªØa
        setCellWithStyle(
          1,
          item.date ? dayjs(item.date).format("DD/MM/YYYY") : "",
          "center"
        );

        // B: Th·ª© - canh gi·ªØa
        setCellWithStyle(
          2,
          item.date
            ? `Th·ª© ${
                dayjs(item.date).day() === 0 ? "CN" : dayjs(item.date).day() + 1
              }`
            : "",
          "center"
        );

        // C: Tr∆∞·ªùng - canh tr√°i
        setCellWithStyle(3, item.schoolName, "left");

        // D: L·ªõp - canh gi·ªØa (join array with comma)
        setCellWithStyle(4, item.className.join(","), "center");

        // E: Bu·ªïi - Ti·∫øt - canh gi·ªØa (VD: C3, S2)
        const sessionCode = item.session === "S√°ng" ? "S" : "C";
        const sessionPeriod = item.period
          ? `${sessionCode}${item.period}`
          : item.session;
        setCellWithStyle(5, sessionPeriod, "center");

        // F: Tr·ª£ gi·∫£ng - canh gi·ªØa
        setCellWithStyle(6, item.ta || "", "center");

        // G: T√™n b√†i - canh tr√°i
        setCellWithStyle(7, item.lessonName, "left");

        // H: T·ª± nh·∫≠n x√©t - canh tr√°i
        setCellWithStyle(8, item.selfEvaluation || "", "left");

        // I: T√¨nh h√¨nh ti·∫øt h·ªçc - canh tr√°i
        setCellWithStyle(9, item.classStatus || "", "left");

        // J: Nh·∫≠n x√©t tr·ª£ gi·∫£ng - canh tr√°i
        setCellWithStyle(10, item.taComment || "", "left");

        // T√≠nh to√°n row height d·ª±a tr√™n s·ªë d√≤ng trong text
        const textFields = [
          item.lessonName || "",
          item.classStatus || "",
          item.selfEvaluation || "",
          item.taComment || "",
        ];

        // T√¨m s·ªë d√≤ng nhi·ªÅu nh·∫•t (ƒë·∫øm \n + 1)
        const maxLines = Math.max(
          ...textFields.map((text) => (text.match(/\n/g) || []).length + 1),
          1
        );

        // Base height 22, m·ªói d√≤ng th√™m ~16 pixels (ƒë·ªÉ fit text t·ªët h∆°n)
        row.height = Math.max(22, maxLines * 16 + 6);

        row.commit();
      });

      // C·∫≠p nh·∫≠t d√≤ng 1 v·ªõi tu·∫ßn range
      const titleRow = worksheet.getRow(1);
      const titleCell = titleRow.getCell(1);
      const weekRangeTitle = `${dayjs(startDate).format("DD/MM")} - ${dayjs(
        endDate
      ).format("DD/MM")}`;
      titleCell.value = `B√ÅO C√ÅO C√îNG VI·ªÜC TU·∫¶N (${weekRangeTitle})`;
      titleRow.commit();

      // Xu·∫•t file
      const weekRange = `${dayjs(startDate).format("DD.MM")} - ${dayjs(
        endDate
      ).format("DD.MM")}`;
      const fileName = `VNLS2526 - B√°o c√°o c√¥ng vi·ªác Tu·∫ßn (${weekRange}) - ${teacher}.xlsx`;

      const buffer = await workbook.xlsx.writeBuffer();
      const blob = new Blob([buffer], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = fileName;
      link.click();
      window.URL.revokeObjectURL(url);

      message.success({
        content:
          "üì• ƒê√£ t·∫£i xu·ªëng file Excel th√†nh c√¥ng! Ki·ªÉm tra th∆∞ m·ª•c Downloads",
        duration: 4,
      });
    } catch (error) {
      console.error("Error:", error);
      message.error({
        content: "‚ùå C√≥ l·ªói x·∫£y ra khi xu·∫•t file Excel. Vui l√≤ng th·ª≠ l·∫°i!",
        duration: 3,
      });
    }
  };

  async function generatePreview() {
    const dates = items.map((it) => it.date).filter((d) => d);
    const startDate = dates.length > 0 ? dates.sort()[0] : "";
    const endDate = dates.length > 0 ? dates.sort()[dates.length - 1] : "";

    const rows = items.map((it) => {
      const sessionCode = it.session === "S√°ng" ? "S" : "C";
      const sessionPeriod = it.period
        ? `${sessionCode}${it.period}`
        : it.session;

      return {
        date: it.date ? dayjs(it.date).format("DD/MM/YYYY") : "",
        weekday: it.date
          ? `Th·ª© ${
              dayjs(it.date).day() === 0 ? "CN" : dayjs(it.date).day() + 1
            }`
          : "",
        school_name: it.schoolName,
        class: it.className.join(","),
        session: sessionPeriod,
        topic: it.lessonName,
        ta: it.ta || "‚Äî",
        classStatus: it.classStatus || "‚Äî",
        selfEvaluation: it.selfEvaluation || "‚Äî",
        taComment: it.taComment || "‚Äî",
      };
    });

    const data = {
      week_range:
        startDate && endDate
          ? `${dayjs(startDate).format("DD/MM")} - ${dayjs(endDate).format(
              "DD/MM/YYYY"
            )}`
          : "",
      teacher: teacher,
      generated_at: new Date().toLocaleString("vi-VN"),
      items: rows,
    };

    try {
      const res = await fetch("/api/fill", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ templateName: "teaching-weekly", data }),
      });
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫°o preview");
      const text = await res.text();
      setHtml(text);
      setPreviewVisible(true);
    } catch (e: any) {
      message.error(e.message);
    }
  }

  const handlePrint = () => {
    if (!html) return;
    const w = window.open("", "_blank");
    if (w) {
      w.document.write(html);
      w.document.close();
      w.focus();
      w.print();
    }
  };

  const columns = [
    {
      title: "Ng√†y",
      dataIndex: "date",
      key: "date",
      render: (date: string) => dayjs(date).format("DD/MM/YYYY"),
      width: 100,
    },
    {
      title: "Tr∆∞·ªùng",
      dataIndex: "schoolName",
      key: "schoolName",
      width: 150,
    },
    {
      title: "Bu·ªïi - Ti·∫øt",
      dataIndex: "session",
      key: "session",
      width: 100,
      render: (_: any, record: Item) => {
        const sessionCode = record.session === "S√°ng" ? "S" : "C";
        return record.period
          ? `${sessionCode}${record.period}`
          : record.session;
      },
    },
    {
      title: "L·ªõp",
      dataIndex: "className",
      key: "className",
      width: 150,
      render: (classNames: string[]) => classNames.join(", "),
    },
    {
      title: "T√™n b√†i",
      dataIndex: "lessonName",
      key: "lessonName",
      width: 200,
    },
    {
      title: "Tr·ª£ gi·∫£ng",
      dataIndex: "ta",
      key: "ta",
      width: 120,
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      width: 100,
      fixed: "right" as const,
      render: (_: any, record: Item) => (
        <Space size="small">
          <Tooltip title="Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông n√†y">
            <Button
              type="primary"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record)}
              size="small"
              style={{
                background: "linear-gradient(135deg, #96E6B3 0%, #D4FCE7 100%)",
                border: "none",
                color: "#2F8F5F",
                boxShadow: "0 2px 8px rgba(150, 230, 179, 0.25)",
              }}
            />
          </Tooltip>
          <Tooltip title="X√≥a ho·∫°t ƒë·ªông n√†y">
            <Button
              danger
              icon={<DeleteOutlined />}
              onClick={() => handleDelete(record.id)}
              size="small"
              style={{
                boxShadow: "0 2px 8px rgba(255, 77, 79, 0.25)",
              }}
            />
          </Tooltip>
        </Space>
      ),
    },
  ];

  if (!mounted) {
    return null;
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        padding: "40px 24px",
      }}
    >
      <div style={{ maxWidth: "1400px", margin: "0 auto" }}>
        {/* Hero Header */}
        <div
          className="hero-header"
          style={{
            background:
              "linear-gradient(135deg, #FFB6C1 0%, #FFF0F5 50%, #E6F3FF 100%)",
            borderRadius: "32px",
            padding: "48px 40px",
            marginBottom: "32px",
            boxShadow: "0 8px 32px rgba(255, 182, 193, 0.25)",
            position: "relative",
            overflow: "hidden",
            border: "3px solid rgba(255, 255, 255, 0.8)",
          }}
        >
          <div
            className="decorative-circle"
            style={{
              position: "absolute",
              top: "-80px",
              right: "-80px",
              width: "250px",
              height: "250px",
              background: "rgba(255, 255, 255, 0.3)",
              borderRadius: "50%",
            }}
          />
          <div
            className="decorative-circle"
            style={{
              position: "absolute",
              bottom: "-60px",
              left: "-60px",
              width: "180px",
              height: "180px",
              background: "rgba(173, 216, 230, 0.2)",
              borderRadius: "50%",
            }}
          />
          <div style={{ position: "relative", zIndex: 1 }}>
            <div style={{ textAlign: "center" }}>
              <div
                className="header-icon"
                style={{
                  fontSize: "64px",
                  marginBottom: "20px",
                  filter: "drop-shadow(0 4px 8px rgba(0,0,0,0.1))",
                }}
              >
                üéì
              </div>
              <Title
                level={1}
                style={{
                  color: "#D04770",
                  marginBottom: "12px",
                  fontSize: "36px",
                  fontWeight: "700",
                  textShadow: "0 2px 4px rgba(208, 71, 112, 0.1)",
                  letterSpacing: "0.5px",
                }}
              >
                B√°o C√°o Gi·∫£ng D·∫°y H√†ng Tu·∫ßn
              </Title>
              <div
                style={{
                  background: "rgba(255, 255, 255, 0.85)",
                  backdropFilter: "blur(10px)",
                  display: "inline-block",
                  padding: "14px 32px",
                  borderRadius: "20px",
                  marginTop: "8px",
                  border: "2px solid rgba(255, 182, 193, 0.3)",
                  boxShadow: "0 4px 12px rgba(255, 182, 193, 0.2)",
                }}
              >
                <Text
                  style={{
                    color: "#D04770",
                    fontSize: "17px",
                    fontWeight: "600",
                  }}
                >
                  üë©‚Äçüè´ Gi√°o vi√™n: <strong>{teacher}</strong>
                </Text>
              </div>
            </div>
          </div>
        </div>

        <Card
          className="form-card"
          title={
            <div
              style={{
                display: "flex",
                alignItems: "center",
                gap: "12px",
                fontSize: "18px",
                fontWeight: "600",
                color: "#D04770",
              }}
            >
              <span
                style={{
                  width: "42px",
                  height: "42px",
                  background:
                    "linear-gradient(135deg, #FFB6C1 0%, #FFE4E9 100%)",
                  borderRadius: "14px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: "22px",
                  boxShadow: "0 3px 10px rgba(255, 182, 193, 0.3)",
                }}
              >
                {editingId ? "‚úèÔ∏è" : "üìù"}
              </span>
              {editingId ? "Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông" : "Th√™m ho·∫°t ƒë·ªông m·ªõi"}
            </div>
          }
          style={{
            marginBottom: "32px",
            borderRadius: "24px",
            boxShadow: "0 6px 24px rgba(255, 182, 193, 0.15)",
            border: "2px solid rgba(255, 182, 193, 0.2)",
            overflow: "hidden",
          }}
          headStyle={{
            background: "linear-gradient(135deg, #FFF5F8 0%, #F0F9FF 100%)",
            borderBottom: "2px solid rgba(255, 182, 193, 0.2)",
            padding: "22px 28px",
          }}
          bodyStyle={{ padding: "36px" }}
        >
          <Form form={form} layout="vertical" onFinish={handleSubmit}>
            <Row gutter={16}>
              <Col xs={24} sm={12} md={8}>
                <Form.Item
                  label="üìÖ Ng√†y"
                  name="date"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y" }]}
                >
                  <DatePicker
                    style={{ width: "100%" }}
                    format="DD/MM/YYYY"
                    placeholder="Ch·ªçn ng√†y"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} sm={12} md={8}>
                <Form.Item
                  label="üè´ T√™n tr∆∞·ªùng"
                  name="schoolName"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn tr∆∞·ªùng" }]}
                >
                  <Select
                    placeholder="Ch·ªçn tr∆∞·ªùng"
                    onChange={handleSchoolChange}
                  >
                    {SCHOOLS.map((s) => (
                      <Select.Option key={s} value={s}>
                        {s}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24} sm={12} md={8}>
                <Form.Item
                  label="üìö Kh·ªëi"
                  name="gradeName"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn kh·ªëi" }]}
                >
                  <Select
                    placeholder={
                      selectedSchool
                        ? "Ch·ªçn kh·ªëi"
                        : "Vui l√≤ng ch·ªçn tr∆∞·ªùng tr∆∞·ªõc"
                    }
                    disabled={!selectedSchool}
                    onChange={handleGradeChange}
                  >
                    {availableGrades.map((g) => (
                      <Select.Option key={g} value={g}>
                        {g}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col xs={24} sm={12} md={8}>
                <Form.Item
                  label="üåÖ Bu·ªïi"
                  name="session"
                  rules={[{ required: true, message: "Vui l√≤ng ch·ªçn bu·ªïi" }]}
                >
                  <Select placeholder="Ch·ªçn bu·ªïi">
                    {SESSIONS.map((s) => (
                      <Select.Option key={s} value={s}>
                        {s}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24} sm={12} md={8}>
                <Form.Item
                  label="‚è∞ Ti·∫øt"
                  name="period"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti·∫øt" }]}
                >
                  <Input
                    placeholder="VD: 1, 2, 3..."
                    type="number"
                    min="1"
                    max="10"
                    className="number-input-no-spinner"
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col xs={24} sm={12}>
                <Form.Item
                  label="üë• T√™n l·ªõp (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)"
                  name="className"
                  rules={[
                    { required: true, message: "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 l·ªõp" },
                  ]}
                >
                  <Select
                    mode="multiple"
                    placeholder={
                      selectedGrade
                        ? "Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu l·ªõp"
                        : "Vui l√≤ng ch·ªçn kh·ªëi tr∆∞·ªõc"
                    }
                    disabled={!selectedGrade}
                    maxTagCount="responsive"
                  >
                    {availableClasses.map((c) => (
                      <Select.Option key={c} value={c}>
                        {c}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24} sm={12}>
                <Form.Item
                  label="üìñ T√™n b√†i"
                  name="lessonName"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n b√†i" }]}
                >
                  <Input placeholder="VD: To√°n - Ph√©p c·ªông trong ph·∫°m vi 20" />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col xs={24} sm={12}>
                <Form.Item label="ü§ù T√™n tr·ª£ gi·∫£ng" name="ta">
                  <Select placeholder="Ch·ªçn tr·ª£ gi·∫£ng" allowClear>
                    {TAS.map((t) => (
                      <Select.Option key={t} value={t}>
                        {t}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col xs={24} md={12}>
                <Form.Item
                  label={
                    <Space>
                      <span>üñ•Ô∏è T√¨nh h√¨nh ti·∫øt h·ªçc</span>
                      <Button
                        type="link"
                        size="small"
                        onClick={() =>
                          form.setFieldValue(
                            "classStatus",
                            CLASS_STATUS_SUGGEST
                          )
                        }
                      >
                        üìù D√πng g·ª£i √Ω
                      </Button>
                    </Space>
                  }
                  name="classStatus"
                >
                  <TextArea
                    autoSize={{ minRows: 5, maxRows: 10 }}
                    placeholder="M√¥ t·∫£ t√¨nh h√¨nh l·ªõp, c∆° s·ªü v·∫≠t ch·∫•t ho·∫∑c nh·∫•n 'D√πng g·ª£i √Ω'"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item label="‚≠ê T·ª± ƒë√°nh gi√°" name="selfEvaluation">
                  <TextArea
                    autoSize={{ minRows: 5, maxRows: 10 }}
                    placeholder="T·ª± ƒë√°nh gi√° v·ªÅ bu·ªïi h·ªçc..."
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col xs={24}>
                <Form.Item
                  label={
                    <Space>
                      <span>üí¨ Nh·∫≠n x√©t tr·ª£ gi·∫£ng</span>
                      <Button
                        type="link"
                        size="small"
                        onClick={() =>
                          form.setFieldValue("taComment", TA_COMMENT_SUGGEST)
                        }
                      >
                        üìù D√πng g·ª£i √Ω
                      </Button>
                    </Space>
                  }
                  name="taComment"
                >
                  <TextArea
                    autoSize={{ minRows: 5, maxRows: 10 }}
                    placeholder="Nh·∫≠n x√©t v·ªÅ tr·ª£ gi·∫£ng ho·∫∑c nh·∫•n 'D√πng g·ª£i √Ω'"
                  />
                </Form.Item>
              </Col>
            </Row>

            <Form.Item style={{ marginTop: "24px" }}>
              <Space size="large">
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  className="submit-button"
                  style={{
                    background:
                      "linear-gradient(135deg, #FFB6C1 0%, #FFE4E9 100%)",
                    border: "none",
                    borderRadius: "16px",
                    height: "52px",
                    padding: "0 40px",
                    fontSize: "16px",
                    fontWeight: "600",
                    color: "#C7385F",
                    boxShadow: "0 4px 15px rgba(255, 182, 193, 0.4)",
                  }}
                >
                  {editingId
                    ? "üíæ C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông"
                    : "‚ú® Th√™m v√†o danh s√°ch"}
                </Button>
                {editingId && (
                  <Button
                    size="large"
                    onClick={() => {
                      form.resetFields();
                      setEditingId(null);
                      setSelectedSchool("");
                      setSelectedGrade("");
                      setAvailableGrades([]);
                      setAvailableClasses([]);
                    }}
                    style={{
                      borderRadius: "16px",
                      height: "52px",
                      padding: "0 40px",
                      fontSize: "16px",
                      fontWeight: "500",
                      borderWidth: "2px",
                      borderColor: "#FFB6C1",
                      color: "#D04770",
                      background: "white",
                      boxShadow: "0 2px 8px rgba(255, 182, 193, 0.2)",
                    }}
                  >
                    ‚úï H·ªßy b·ªè
                  </Button>
                )}
              </Space>
            </Form.Item>
          </Form>
        </Card>

        {items.length > 0 && (
          <>
            <Card
              className="activities-card"
              title={
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "12px",
                    fontSize: "18px",
                    fontWeight: "600",
                    color: "#7B68A6",
                  }}
                >
                  <span
                    style={{
                      width: "42px",
                      height: "42px",
                      background:
                        "linear-gradient(135deg, #D4C5F9 0%, #E8E0FF 100%)",
                      borderRadius: "14px",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      fontSize: "22px",
                      boxShadow: "0 3px 10px rgba(212, 197, 249, 0.3)",
                    }}
                  >
                    üìö
                  </span>
                  Danh s√°ch ho·∫°t ƒë·ªông ({items.length} ho·∫°t ƒë·ªông)
                </div>
              }
              extra={
                <Space size="middle">
                  <Tooltip title="T·∫£i xu·ªëng file Excel v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp">
                    <Button
                      type="primary"
                      icon={<FileExcelOutlined />}
                      onClick={exportToExcel}
                      size="large"
                      className="excel-button"
                      style={{
                        background:
                          "linear-gradient(135deg, #96E6B3 0%, #D4FCE7 100%)",
                        border: "none",
                        borderRadius: "16px",
                        height: "52px",
                        padding: "0 32px",
                        fontWeight: "600",
                        color: "#2F8F5F",
                        boxShadow: "0 4px 16px rgba(150, 230, 179, 0.3)",
                      }}
                    >
                      T·∫£i Excel
                    </Button>
                  </Tooltip>
                  <Tooltip title="Xem tr∆∞·ªõc b√°o c√°o tr∆∞·ªõc khi in ho·∫∑c l∆∞u">
                    <Button
                      icon={<EyeOutlined />}
                      onClick={generatePreview}
                      size="large"
                      className="preview-button"
                      style={{
                        borderRadius: "16px",
                        height: "52px",
                        padding: "0 32px",
                        fontWeight: "600",
                        borderColor: "#D4C5F9",
                        borderWidth: "2px",
                        color: "#7B68A6",
                        background: "white",
                      }}
                    >
                      Xem Preview
                    </Button>
                  </Tooltip>
                </Space>
              }
              style={{
                marginBottom: "32px",
                borderRadius: "24px",
                boxShadow: "0 6px 24px rgba(212, 197, 249, 0.2)",
                border: "2px solid rgba(212, 197, 249, 0.3)",
              }}
              headStyle={{
                background: "linear-gradient(135deg, #F9F7FF 0%, #EFF6FF 100%)",
                borderBottom: "2px solid rgba(212, 197, 249, 0.2)",
                padding: "22px 28px",
              }}
              bodyStyle={{ padding: "28px" }}
            >
              <Table
                columns={columns}
                dataSource={items}
                rowKey="id"
                scroll={{ x: 1200 }}
                pagination={false}
              />
            </Card>
          </>
        )}

        {items.length === 0 && (
          <Card
            className="empty-state"
            style={{
              textAlign: "center",
              padding: "80px 48px",
              borderRadius: "28px",
              boxShadow:
                "0 8px 32px rgba(255, 182, 193, 0.15), inset 0 1px 0 rgba(255,255,255,0.5)",
              border: "3px dashed rgba(255, 182, 193, 0.4)",
              background: "linear-gradient(135deg, #FFFAFC 0%, #F0F9FF 100%)",
            }}
          >
            <div
              className="empty-icon"
              style={{
                width: "150px",
                height: "150px",
                margin: "0 auto 32px",
                background: "linear-gradient(135deg, #FFB6C1 0%, #E8E0FF 100%)",
                borderRadius: "50%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "72px",
                boxShadow:
                  "0 12px 32px rgba(255, 182, 193, 0.3), 0 0 0 8px rgba(255, 182, 193, 0.1)",
              }}
            >
              üìù
            </div>
            <Title
              level={2}
              style={{
                marginBottom: "16px",
                color: "#D04770",
                fontSize: "28px",
              }}
            >
              B·∫Øt ƒë·∫ßu ghi nh·∫≠n ho·∫°t ƒë·ªông gi·∫£ng d·∫°y
            </Title>
            <Text
              style={{
                fontSize: "17px",
                color: "#7B68A6",
                display: "block",
                marginTop: "12px",
                lineHeight: "1.6",
              }}
            >
              üìö H√£y th√™m c√°c ti·∫øt h·ªçc, l·ªõp h·ªçc v√† ho·∫°t ƒë·ªông gi·∫£ng d·∫°y c·ªßa b·∫°n
            </Text>
            <div
              style={{
                marginTop: "24px",
                padding: "20px",
                background: "rgba(255, 255, 255, 0.7)",
                borderRadius: "16px",
                border: "1px solid rgba(255, 182, 193, 0.2)",
              }}
            >
              <Text
                style={{
                  fontSize: "14px",
                  color: "#A0A0B0",
                  display: "block",
                  lineHeight: "1.8",
                }}
              >
                üí° <strong>H∆∞·ªõng d·∫´n:</strong> ƒêi·ªÅn th√¥ng tin v√†o form b√™n tr√™n
                <br />
                ‚úÖ Ch·ªçn ng√†y, tr∆∞·ªùng, l·ªõp, v√† c√°c th√¥ng tin c·∫ßn thi·∫øt
                <br />‚ú® Nh·∫•n "Th√™m v√†o danh s√°ch" ƒë·ªÉ l∆∞u ho·∫°t ƒë·ªông
              </Text>
            </div>
          </Card>
        )}

        <Modal
          title={
            <div
              style={{
                fontSize: "20px",
                fontWeight: "600",
                display: "flex",
                alignItems: "center",
                gap: "12px",
                color: "#7B68A6",
              }}
            >
              <span
                style={{
                  width: "40px",
                  height: "40px",
                  background:
                    "linear-gradient(135deg, #D4C5F9 0%, #E8E0FF 100%)",
                  borderRadius: "12px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: "20px",
                  boxShadow: "0 3px 10px rgba(212, 197, 249, 0.3)",
                }}
              >
                <EyeOutlined />
              </span>
              Preview B√°o C√°o
            </div>
          }
          open={previewVisible}
          onCancel={() => setPreviewVisible(false)}
          width="90%"
          footer={[
            <Button
              key="close"
              onClick={() => setPreviewVisible(false)}
              size="large"
              style={{
                borderRadius: "16px",
                height: "48px",
                padding: "0 28px",
                fontSize: "16px",
                fontWeight: "500",
                borderWidth: "2px",
                borderColor: "#FFE4E9",
              }}
            >
              ‚úï ƒê√≥ng
            </Button>,
            <Button
              key="print"
              type="primary"
              icon={<PrinterOutlined />}
              onClick={handlePrint}
              size="large"
              style={{
                background: "linear-gradient(135deg, #D4C5F9 0%, #E8E0FF 100%)",
                border: "none",
                borderRadius: "16px",
                height: "48px",
                padding: "0 32px",
                fontSize: "16px",
                fontWeight: "600",
                color: "#7B68A6",
                boxShadow: "0 4px 16px rgba(212, 197, 249, 0.3)",
              }}
            >
              üñ®Ô∏è In PDF
            </Button>,
          ]}
          styles={{
            body: { padding: "28px" },
          }}
        >
          {html && (
            <div
              style={{
                border: "2px solid #e8e8e8",
                borderRadius: "16px",
                overflow: "hidden",
                boxShadow: "0 4px 12px rgba(0,0,0,0.08)",
              }}
            >
              <iframe
                srcDoc={html}
                style={{ width: "100%", height: "700px", border: "none" }}
              />
            </div>
          )}
        </Modal>
      </div>
    </div>
  );
}
